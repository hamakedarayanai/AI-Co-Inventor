
import { GoogleGenAI, Type } from "@google/genai";
import type { GeminiResponse } from '../types';

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable is not set.");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const textModel = 'gemini-2.5-flash';
const imageModel = 'imagen-4.0-generate-001';

const responseSchema = {
    type: Type.OBJECT,
    properties: {
        synthesis: {
            type: Type.STRING,
            description: "A detailed synthesis of the current state of research on the topic, identifying connections between fields and pointing out gaps where solutions don't exist. This should be a comprehensive summary of around 150-200 words."
        },
        ideas: {
            type: Type.ARRAY,
            description: "A list of exactly 3 novel, multi-faceted solutions.",
            items: {
                type: Type.OBJECT,
                properties: {
                    pitch: {
                        type: Type.STRING,
                        description: "A short, catchy, and descriptive title or pitch for the idea (e.g., 'Bio-Degradable Microbe Packaging')."
                    },
                    howItWorks: {
                        type: Type.STRING,
                        description: "A brief 'how it works' description explaining the core mechanism or concept in 2-3 sentences."
                    }
                },
                required: ["pitch", "howItWorks"]
            }
        }
    },
    required: ["synthesis", "ideas"]
};

export async function generateInventionIdeas(topic: string): Promise<GeminiResponse> {
    try {
        const prompt = `
            You are a sophisticated AI Co-Inventor, a research and ideation expert.
            Your task is to analyze a given topic, synthesize information from diverse fields (academic papers, news, patents, social media), and generate innovative solutions.

            Topic: "${topic}"

            Instructions:
            1.  **Synthesize:** First, provide a comprehensive synthesis of the current landscape for this topic. Identify key challenges, existing approaches, interdisciplinary connections, and significant gaps in research or market solutions.
            2.  **Ideate:** Based on your synthesis, generate exactly 3 distinct, novel, and multi-faceted solutions. For each idea, provide a short, catchy pitch and a brief "how it works" description.
            3.  **Format:** Return the entire output in the specified JSON format.
        `;

        const response = await ai.models.generateContent({
            model: textModel,
            contents: prompt,
            config: {
                responseMimeType: "application/json",
                responseSchema: responseSchema,
                temperature: 0.8,
            }
        });

        const jsonText = response.text.trim();
        const parsedResponse = JSON.parse(jsonText) as GeminiResponse;
        
        if (!parsedResponse.synthesis || !parsedResponse.ideas || parsedResponse.ideas.length === 0) {
            throw new Error("Invalid response structure from Gemini API.");
        }

        return parsedResponse;

    } catch (error) {
        console.error("Error generating invention ideas:", error);
        throw new Error(`Failed to generate ideas. Please try again. Details: ${error instanceof Error ? error.message : String(error)}`);
    }
}


export async function generateImageForIdea(prompt: string): Promise<string> {
    try {
        const response = await ai.models.generateImages({
            model: imageModel,
            prompt: prompt,
            config: {
                numberOfImages: 1,
                outputMimeType: 'image/jpeg',
                aspectRatio: '16:9',
            },
        });

        if (!response.generatedImages || response.generatedImages.length === 0) {
            throw new Error("No image was generated by the API.");
        }
        
        const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
        return `data:image/jpeg;base64,${base64ImageBytes}`;

    } catch (error) {
        console.error("Error generating image:", error);
        // Return a placeholder on failure to not break the UI
        return `https://picsum.photos/seed/${encodeURIComponent(prompt)}/1280/720`;
    }
}
